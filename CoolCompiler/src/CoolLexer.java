/* The following code was generated by JFlex 1.4.3 on 10-20-14 04:50 PM */

/*
 *  The scanner definition for COOL.
 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10-20-14 04:50 PM from the specification file
 * <tt>/home/jaime/git/CoolCompiler/CoolCompiler/src/cool.lex</tt>
 */
class CoolLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\2\2\0\1\6\22\0\1\6\1\0\1\5\5\0"+
    "\1\3\1\23\1\4\1\12\1\20\1\1\1\16\1\13\12\11\1\22"+
    "\1\21\1\15\1\14\1\65\1\0\1\24\1\43\1\10\1\40\1\71"+
    "\1\31\1\33\1\10\1\54\1\50\2\10\1\32\1\10\1\52\1\61"+
    "\1\36\1\10\1\56\1\30\1\34\1\73\1\67\1\64\1\10\1\35"+
    "\1\10\4\0\1\27\1\0\1\42\1\7\1\37\1\70\1\45\1\46"+
    "\1\7\1\53\1\47\2\7\1\41\1\7\1\51\1\60\1\62\1\7"+
    "\1\55\1\44\1\57\1\72\1\66\1\63\3\7\1\25\1\0\1\26"+
    "\1\17\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\6\1"+
    "\1\10\1\1\4\10\1\1\1\10\1\1\2\10\1\1"+
    "\2\10\1\1\2\7\1\27\1\3\1\30\1\0\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\5\0\1\37\2\0"+
    "\2\10\2\0\5\10\1\37\1\10\1\40\1\41\1\0"+
    "\1\40\1\41\2\10\2\0\2\10\2\42\2\10\1\0"+
    "\1\43\4\0\1\44\3\0\2\10\2\0\1\44\6\10"+
    "\2\0\1\45\1\46\1\45\1\46\4\10\2\0\1\47"+
    "\1\50\1\51\1\52\1\53\1\10\1\54\1\0\1\54"+
    "\1\51\1\47\1\50\2\10\2\0\1\52\1\55\1\53"+
    "\1\10\2\0\2\56\2\10\2\0\2\57\1\0\1\60"+
    "\1\10\1\60\2\0\1\10\2\0\2\61\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\264\0\u012c\0\u0168"+
    "\0\264\0\u01a4\0\u01e0\0\264\0\264\0\264\0\u021c\0\u0258"+
    "\0\264\0\264\0\264\0\264\0\264\0\264\0\264\0\264"+
    "\0\264\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc"+
    "\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc"+
    "\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744\0\264\0\u0780"+
    "\0\u07bc\0\u07bc\0\264\0\u07f8\0\264\0\264\0\u0834\0\264"+
    "\0\264\0\264\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\264"+
    "\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40"+
    "\0\u0b7c\0\u0bb8\0\u0bf4\0\u01e0\0\u0c30\0\u01e0\0\u0c6c\0\u0ca8"+
    "\0\264\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c"+
    "\0\u01e0\0\264\0\u0e88\0\u0ec4\0\u0f00\0\264\0\u07bc\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\264\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0"+
    "\0\u111c\0\u1158\0\u01e0\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284"+
    "\0\u12c0\0\u12fc\0\u1338\0\u01e0\0\u01e0\0\264\0\264\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\264\0\264\0\264"+
    "\0\264\0\264\0\u14dc\0\u01e0\0\u1518\0\264\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u1554\0\u1590\0\u15cc\0\u1608\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u1644\0\u1680\0\u16bc\0\u01e0\0\264\0\u16f8\0\u1734\0\u1770"+
    "\0\u17ac\0\u01e0\0\264\0\u17e8\0\u01e0\0\u1824\0\264\0\u1860"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u01e0\0\264\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\4\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\4"+
    "\1\32\1\33\1\34\1\35\1\36\1\4\1\37\1\40"+
    "\1\41\1\42\1\13\1\4\1\13\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\13\1\4\1\13\1\4\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\4\1\13\1\4"+
    "\1\13\1\4\1\13\1\4\2\57\1\6\1\57\1\60"+
    "\67\57\2\61\1\62\2\61\1\63\66\61\75\0\1\64"+
    "\76\0\1\65\112\0\1\66\56\0\1\12\1\0\1\67"+
    "\17\0\7\67\1\0\1\67\2\0\1\67\4\0\1\67"+
    "\1\0\1\67\1\0\1\67\1\0\1\67\2\0\1\67"+
    "\2\0\1\67\2\0\1\67\1\0\1\67\1\0\1\67"+
    "\7\0\3\13\15\0\36\13\1\0\6\13\65\0\1\70"+
    "\7\0\1\71\12\0\1\72\110\0\1\73\72\0\1\74"+
    "\1\0\1\75\6\0\1\75\2\0\1\74\60\0\1\76"+
    "\13\0\1\76\12\0\2\77\61\0\2\100\76\0\2\101"+
    "\77\0\2\102\21\0\3\13\15\0\3\13\1\103\6\13"+
    "\1\103\2\104\21\13\1\0\6\13\32\0\1\105\6\0"+
    "\1\105\2\106\37\0\3\13\15\0\2\13\1\107\13\13"+
    "\1\107\12\13\2\110\3\13\1\0\6\13\7\0\3\13"+
    "\15\0\1\13\1\111\1\13\1\112\6\13\1\112\2\13"+
    "\1\111\20\13\1\0\6\13\7\0\3\13\15\0\13\13"+
    "\2\113\3\13\2\114\14\13\1\0\6\13\7\0\3\13"+
    "\15\0\1\13\1\115\2\13\1\116\10\13\1\115\1\13"+
    "\1\116\2\13\2\117\12\13\1\0\6\13\30\0\1\120"+
    "\2\0\1\121\10\0\1\120\1\0\1\121\2\0\2\122"+
    "\30\0\3\13\15\0\2\13\1\123\13\13\1\123\12\13"+
    "\2\124\3\13\1\0\6\13\31\0\1\125\13\0\1\125"+
    "\12\0\2\126\21\0\3\13\15\0\24\13\2\127\2\130"+
    "\6\13\1\0\6\13\7\0\3\13\15\0\4\13\1\131"+
    "\12\13\1\131\16\13\1\0\6\13\33\0\1\132\12\0"+
    "\1\132\34\0\3\13\15\0\31\13\2\133\3\13\1\0"+
    "\6\13\7\0\3\13\15\0\24\13\2\134\10\13\1\0"+
    "\6\13\53\0\2\135\42\0\1\136\50\0\5\137\1\63"+
    "\66\137\2\64\1\57\71\64\7\0\3\67\15\0\36\67"+
    "\1\0\6\67\32\0\1\140\103\0\2\141\60\0\1\142"+
    "\13\0\1\142\63\0\1\143\22\0\1\143\74\0\2\144"+
    "\43\0\1\145\13\0\1\145\106\0\2\146\21\0\3\13"+
    "\15\0\13\13\2\147\21\13\1\0\6\13\7\0\3\13"+
    "\15\0\1\13\1\150\13\13\1\150\20\13\1\0\6\13"+
    "\42\0\2\151\60\0\1\152\13\0\1\152\36\0\3\13"+
    "\15\0\5\13\1\153\22\13\1\153\5\13\1\0\6\13"+
    "\7\0\3\13\15\0\31\13\2\154\3\13\1\0\6\13"+
    "\7\0\3\13\15\0\13\13\2\155\21\13\1\0\6\13"+
    "\7\0\3\13\15\0\1\13\1\156\13\13\1\156\20\13"+
    "\1\0\6\13\7\0\3\13\15\0\3\13\1\157\6\13"+
    "\1\157\23\13\1\0\6\13\7\0\3\13\15\0\36\13"+
    "\1\0\2\160\4\13\7\0\3\13\15\0\24\13\2\161"+
    "\10\13\1\0\6\13\66\0\2\162\57\0\2\163\26\0"+
    "\3\13\15\0\34\13\2\164\1\0\6\13\7\0\3\13"+
    "\15\0\5\13\1\165\22\13\1\165\5\13\1\0\6\13"+
    "\63\0\2\166\43\0\1\167\22\0\1\167\23\0\3\13"+
    "\15\0\2\13\1\170\13\13\1\170\17\13\1\0\6\13"+
    "\7\0\3\13\15\0\36\13\1\0\4\13\2\171\7\0"+
    "\3\13\15\0\31\13\2\172\3\13\1\0\6\13\7\0"+
    "\3\13\15\0\20\13\2\173\14\13\1\0\6\13\47\0"+
    "\2\174\56\0\1\175\77\0\2\176\64\0\1\177\13\0"+
    "\1\177\64\0\1\200\23\0\1\200\62\0\2\201\53\0"+
    "\1\202\6\0\1\202\41\0\3\13\15\0\1\13\1\203"+
    "\13\13\1\203\20\13\1\0\6\13\7\0\3\13\15\0"+
    "\2\13\1\204\13\13\1\204\17\13\1\0\6\13\30\0"+
    "\1\205\13\0\1\205\60\0\1\206\13\0\1\206\35\0"+
    "\3\13\15\0\7\13\1\207\23\13\1\207\2\13\1\0"+
    "\6\13\7\0\3\13\15\0\10\13\2\210\24\13\1\0"+
    "\6\13\7\0\3\13\15\0\2\13\1\211\13\13\1\211"+
    "\17\13\1\0\6\13\7\0\3\13\15\0\1\13\1\171"+
    "\13\13\1\171\20\13\1\0\6\13\7\0\3\13\15\0"+
    "\31\13\2\212\3\13\1\0\6\13\7\0\3\13\15\0"+
    "\2\13\1\213\13\13\1\213\17\13\1\0\6\13\60\0"+
    "\2\214\43\0\1\215\13\0\1\215\35\0\3\13\15\0"+
    "\22\13\2\216\12\13\1\0\6\13\7\0\3\13\15\0"+
    "\2\13\1\217\13\13\1\217\17\13\1\0\6\13\7\0"+
    "\3\13\15\0\3\13\1\220\6\13\1\220\23\13\1\0"+
    "\6\13\7\0\3\13\15\0\3\13\1\221\6\13\1\221"+
    "\23\13\1\0\6\13\32\0\1\222\6\0\1\222\61\0"+
    "\1\223\53\0\3\13\15\0\1\13\1\224\13\13\1\224"+
    "\20\13\1\0\6\13\30\0\1\225\13\0\1\225\36\0"+
    "\3\13\15\0\20\13\2\226\14\13\1\0\6\13\7\0"+
    "\3\13\15\0\26\13\2\227\6\13\1\0\6\13\47\0"+
    "\2\230\100\0\2\231\24\0\3\13\15\0\2\13\1\232"+
    "\13\13\1\232\17\13\1\0\6\13\31\0\1\233\13\0"+
    "\1\233\62\0\1\234\46\0\3\13\15\0\36\13\1\0"+
    "\2\13\2\235\2\13\7\0\3\13\15\0\20\13\2\236"+
    "\14\13\1\0\6\13\70\0\2\237\51\0\2\240\60\0"+
    "\1\241\45\0\3\13\15\0\5\13\1\242\22\13\1\242"+
    "\5\13\1\0\6\13\34\0\1\243\22\0\1\243\52\0"+
    "\1\244\44\0\3\13\15\0\1\13\1\245\13\13\1\245"+
    "\20\13\1\0\6\13\30\0\1\246\13\0\1\246\60\0"+
    "\1\247\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6540];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\2\1\3\11"+
    "\2\1\11\11\25\1\1\11\3\1\1\11\1\0\2\11"+
    "\1\1\3\11\5\0\1\11\2\0\2\1\2\0\11\1"+
    "\1\0\1\11\3\1\2\0\3\1\1\11\2\1\1\0"+
    "\1\11\4\0\1\11\3\0\2\1\2\0\7\1\2\0"+
    "\2\1\2\11\4\1\2\0\5\11\2\1\1\0\1\11"+
    "\5\1\2\0\4\1\2\0\1\1\1\11\2\1\2\0"+
    "\1\1\1\11\1\0\2\1\1\11\2\0\1\1\2\0"+
    "\1\1\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Max size of string constants
    static int MAX_STR_CONST = 1025;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

    private int curr_lineno = 1;
    int get_curr_lineno() {
	return curr_lineno;
    }
    
    //quick fix to send EOF at the end of the file if it finishes mid comment or mid string
    private int eof_message = 0;
    int get_eof_message() {
    	return eof_message;
    }

    private AbstractSymbol filename;

    void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }

    AbstractSymbol curr_filename() {
	return filename;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoolLexer(java.io.Reader in) {
      // empty for now
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CoolLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { return new Symbol(TokenConstants.LBRACE);
          }
        case 50: break;
        case 29: 
          { return new Symbol(TokenConstants.ASSIGN);
          }
        case 51: break;
        case 9: 
          { AbstractSymbol i1 = AbstractTable.inttable.addInt(Integer.parseInt(yytext()));
    Symbol i2 = new Symbol(TokenConstants.INT_CONST);
    i2.value = i1;
    return i2;
          }
        case 52: break;
        case 15: 
          { return new Symbol(TokenConstants.NEG);
          }
        case 53: break;
        case 32: 
          { return new Symbol(TokenConstants.IF);
          }
        case 54: break;
        case 36: 
          { return new Symbol(TokenConstants.LET);
          }
        case 55: break;
        case 45: 
          { Symbol b1 = new Symbol(TokenConstants.BOOL_CONST);
          }
        case 56: break;
        case 33: 
          { return new Symbol(TokenConstants.IN);
          }
        case 57: break;
        case 12: 
          { return new Symbol(TokenConstants.EQ);
          }
        case 58: break;
        case 20: 
          { return new Symbol(TokenConstants.AT);
          }
        case 59: break;
        case 37: 
          { return new Symbol(TokenConstants.NEW);
          }
        case 60: break;
        case 35: 
          { yybegin(YYINITIAL);
          }
        case 61: break;
        case 41: 
          { return new Symbol(TokenConstants.LOOP);
          }
        case 62: break;
        case 18: 
          { return new Symbol(TokenConstants.COLON);
          }
        case 63: break;
        case 10: 
          { return new Symbol(TokenConstants.PLUS);
          }
        case 64: break;
        case 7: 
          { ;
          }
        case 65: break;
        case 39: 
          { return new Symbol(TokenConstants.ESAC);
          }
        case 66: break;
        case 4: 
          { return new Symbol(TokenConstants.LPAREN);
          }
        case 67: break;
        case 47: 
          { return new Symbol(TokenConstants.WHILE);
          }
        case 68: break;
        case 26: 
          { String err_msg = new String("Unmatched comment terminator");
		StringSymbol error = new StringSymbol(err_msg, err_msg.length(), 0);
		Symbol ret = new Symbol(TokenConstants.ERROR);
		ret.value = error;
		return ret;
          }
        case 69: break;
        case 25: 
          { yybegin(COMMENT);
          }
        case 70: break;
        case 44: 
          { return new Symbol(TokenConstants.CASE);
          }
        case 71: break;
        case 49: 
          { return new Symbol(TokenConstants.INHERITS);
          }
        case 72: break;
        case 40: 
          { return new Symbol(TokenConstants.ELSE);
          }
        case 73: break;
        case 22: 
          { return new Symbol(TokenConstants.RBRACE);
          }
        case 74: break;
        case 14: 
          { return new Symbol(TokenConstants.DOT);
          }
        case 75: break;
        case 42: 
          { return new Symbol(TokenConstants.THEN);
          }
        case 76: break;
        case 30: 
          { return new Symbol(TokenConstants.LE);
          }
        case 77: break;
        case 5: 
          { return new Symbol(TokenConstants.MULT);
          }
        case 78: break;
        case 24: 
          { AbstractSymbol s1 = AbstractTable.stringtable.addString(yytext().substring(0,yytext().length()-1));
        Symbol s2 = new Symbol(TokenConstants.STR_CONST);
        s2.value = s1;
        yybegin(YYINITIAL);
        return s2;
          }
        case 79: break;
        case 8: 
          { AbstractSymbol o1 = AbstractTable.idtable.addString(yytext());
    Symbol o2 = new Symbol(TokenConstants.OBJECTID);
    o2.value = o1;
    return o2;
          }
        case 80: break;
        case 28: 
          { return new Symbol(TokenConstants.DARROW);
          }
        case 81: break;
        case 23: 
          { /* This rule should be the very last
                                     in your lexical specification and
                                     will match match everything not
                                     matched by other lexical rules. */
                                  System.err.println("LEXER BUG - UNMATCHED: " + yytext());
          }
        case 82: break;
        case 3: 
          { curr_lineno++;
          }
        case 83: break;
        case 31: 
          { return new Symbol(TokenConstants.FI);
          }
        case 84: break;
        case 2: 
          { return new Symbol(TokenConstants.MINUS);
          }
        case 85: break;
        case 27: 
          { AbstractSymbol t1 = AbstractTable.idtable.addString(yytext());
    Symbol t2 = new Symbol(TokenConstants.TYPEID);
    t2.value = t1;   return t2;
          }
        case 86: break;
        case 6: 
          { yybegin(STRING);
          }
        case 87: break;
        case 48: 
          { return new Symbol(TokenConstants.ISVOID);
          }
        case 88: break;
        case 34: 
          { return new Symbol(TokenConstants.OF);
          }
        case 89: break;
        case 17: 
          { return new Symbol(TokenConstants.SEMI);
          }
        case 90: break;
        case 38: 
          { return new Symbol(TokenConstants.NOT);
          }
        case 91: break;
        case 16: 
          { return new Symbol(TokenConstants.COMMA);
          }
        case 92: break;
        case 11: 
          { return new Symbol(TokenConstants.DIV);
          }
        case 93: break;
        case 13: 
          { return new Symbol(TokenConstants.LT);
          }
        case 94: break;
        case 46: 
          { return new Symbol(TokenConstants.CLASS);
          }
        case 95: break;
        case 43: 
          { return new Symbol(TokenConstants.POOL);
          }
        case 96: break;
        case 19: 
          { return new Symbol(TokenConstants.RPAREN);
          }
        case 97: break;
        case 1: 
          { String err_msg = new String("Unexpected character: "+yytext());
											StringSymbol error = new StringSymbol(err_msg, err_msg.length(), 0);
											Symbol ret = new Symbol(TokenConstants.ERROR);
											ret.value = error;
											return ret;
          }
        case 98: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     switch(yystate()) {
    case YYINITIAL:
	/* nothing special to do in the initial state */
	break;
	case COMMENT:
		if(eof_message > 0) {
			return new Symbol(TokenConstants.EOF);
		}	
		String err_msg = new String("EOF in comment");
		StringSymbol error = new StringSymbol(err_msg, err_msg.length(), 0);
		Symbol ret = new Symbol(TokenConstants.ERROR);
		ret.value = error;
		eof_message++;
		return ret;
 
    case STRING:
    if(eof_message > 0) {
			return new Symbol(TokenConstants.EOF);
		}	
		String str_err_msg = new String("EOF in string");
		StringSymbol str_error = new StringSymbol(str_err_msg, str_err_msg.length(), 0);
		Symbol str_ret = new Symbol(TokenConstants.ERROR);
		str_ret.value = str_error;
		eof_message++;
		return str_ret;
	}	
    return new Symbol(TokenConstants.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
