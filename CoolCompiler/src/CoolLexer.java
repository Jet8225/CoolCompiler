/* The following code was generated by JFlex 1.4.3 on 10/11/14 1:30 AM */

/*
 *  The scanner definition for COOL.
 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/11/14 1:30 AM from the specification file
 * <tt>/home/jesus/git/CoolCompiler/CoolCompiler/src/cool.lex</tt>
 */
class CoolLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\2\2\0\1\6\22\0\1\6\1\0\1\5\5\0"+
    "\1\3\1\22\1\4\1\11\1\17\1\1\1\15\1\12\12\10\1\21"+
    "\1\20\1\14\1\13\1\65\1\0\1\23\1\55\1\36\1\54\1\67"+
    "\1\46\1\50\1\7\1\61\1\27\2\7\1\47\1\7\1\60\1\41"+
    "\1\53\1\7\1\62\1\32\1\51\1\70\1\66\1\64\1\7\1\52"+
    "\1\7\4\0\1\26\1\0\1\55\1\42\1\45\1\67\1\44\1\57"+
    "\1\35\1\61\1\34\1\43\1\7\1\40\1\7\1\30\1\37\1\63"+
    "\1\7\1\33\1\56\1\31\1\70\1\66\1\64\3\7\1\24\1\0"+
    "\1\25\1\16\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\14\10"+
    "\2\7\1\1\1\3\1\27\1\0\1\30\4\0\1\31"+
    "\1\32\1\33\1\34\1\10\1\35\4\10\1\36\6\10"+
    "\1\37\3\10\1\40\6\0\2\10\1\41\1\42\3\10"+
    "\1\43\7\10\1\44\4\0\2\10\1\45\1\46\1\47"+
    "\1\50\1\51\1\10\1\52\1\53\1\10\3\0\2\10"+
    "\1\54\1\55\2\0\1\10\1\56\1\0\1\10\1\0"+
    "\1\57\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\253\0\u011d\0\253"+
    "\0\253\0\u0156\0\u018f\0\253\0\253\0\253\0\u01c8\0\u0201"+
    "\0\253\0\253\0\253\0\253\0\253\0\253\0\253\0\253"+
    "\0\253\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390"+
    "\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\253\0\u04e6\0\u051f"+
    "\0\u051f\0\253\0\u0558\0\253\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\253\0\253\0\253\0\u0675\0\u06ae\0\u018f\0\u06e7\0\u0720"+
    "\0\u0759\0\u0792\0\u018f\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af"+
    "\0\u08e8\0\u018f\0\u0921\0\u095a\0\u0993\0\253\0\u051f\0\u09cc"+
    "\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u018f\0\u018f"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u018f\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1"+
    "\0\u0cea\0\u0d23\0\u0d5c\0\253\0\u0d95\0\u0dce\0\u0e07\0\u0e40"+
    "\0\u0e79\0\u0eb2\0\u018f\0\u018f\0\u018f\0\u018f\0\u018f\0\u0eeb"+
    "\0\u018f\0\u018f\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u018f\0\u018f\0\u107a\0\u10b3\0\u10ec\0\u018f\0\u1125\0\u115e"+
    "\0\u1197\0\u018f\0\u11d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\4\1\32"+
    "\1\33\1\34\2\13\1\32\2\13\1\35\1\36\1\35"+
    "\2\13\1\37\1\40\1\37\1\36\1\41\1\42\1\13"+
    "\1\43\1\40\2\13\1\44\1\33\2\13\1\43\1\45"+
    "\1\4\3\13\2\46\1\6\1\46\1\47\64\46\2\50"+
    "\1\51\2\50\1\52\63\50\72\0\1\53\73\0\1\54"+
    "\72\0\1\12\20\0\1\55\2\0\1\56\3\0\1\57"+
    "\2\0\1\60\36\0\2\13\15\0\37\13\1\0\3\13"+
    "\65\0\1\61\4\0\1\62\11\0\1\63\64\0\2\13"+
    "\15\0\2\13\1\64\1\13\1\65\15\13\1\66\5\13"+
    "\1\65\1\66\1\64\4\13\1\0\3\13\7\0\2\13"+
    "\15\0\11\13\1\67\1\13\1\67\2\13\1\70\1\13"+
    "\1\70\16\13\1\0\3\13\7\0\2\13\15\0\5\13"+
    "\1\71\25\13\1\72\1\71\2\13\1\0\3\13\7\0"+
    "\2\13\15\0\22\13\1\73\6\13\1\73\5\13\1\0"+
    "\3\13\7\0\2\13\15\0\11\13\1\74\1\13\1\74"+
    "\2\13\1\75\1\13\1\75\16\13\1\0\3\13\7\0"+
    "\2\13\15\0\4\13\1\76\5\13\1\77\6\13\1\77"+
    "\6\13\1\76\6\13\1\0\3\13\7\0\2\13\15\0"+
    "\12\13\1\100\6\13\1\100\5\13\1\101\7\13\1\0"+
    "\3\13\7\0\2\13\15\0\1\13\1\102\4\13\1\102"+
    "\30\13\1\0\3\13\7\0\2\13\15\0\33\13\1\72"+
    "\3\13\1\0\3\13\7\0\2\13\15\0\11\13\1\103"+
    "\1\13\1\103\23\13\1\0\3\13\7\0\2\13\15\0"+
    "\1\13\1\102\4\13\1\102\20\13\1\104\7\13\1\0"+
    "\3\13\7\0\2\13\15\0\33\13\1\105\3\13\1\0"+
    "\3\13\22\0\1\106\46\0\5\107\1\52\63\107\2\53"+
    "\1\46\66\53\30\0\1\110\71\0\1\111\14\0\1\112"+
    "\61\0\1\113\73\0\1\114\35\0\2\13\15\0\33\13"+
    "\1\115\3\13\1\0\3\13\7\0\2\13\15\0\37\13"+
    "\1\0\1\116\2\13\7\0\2\13\15\0\3\13\1\117"+
    "\17\13\1\117\13\13\1\0\3\13\7\0\2\13\15\0"+
    "\36\13\1\120\1\0\3\13\7\0\2\13\15\0\37\13"+
    "\1\0\2\13\1\121\7\0\2\13\15\0\16\13\1\122"+
    "\1\13\1\122\16\13\1\0\3\13\7\0\2\13\15\0"+
    "\11\13\1\123\1\13\1\123\23\13\1\0\3\13\7\0"+
    "\2\13\15\0\3\13\1\124\17\13\1\124\13\13\1\0"+
    "\3\13\7\0\2\13\15\0\27\13\1\125\7\13\1\0"+
    "\3\13\7\0\2\13\15\0\4\13\1\126\23\13\1\126"+
    "\6\13\1\0\3\13\7\0\2\13\15\0\27\13\1\127"+
    "\7\13\1\0\3\13\7\0\2\13\15\0\4\13\1\130"+
    "\23\13\1\130\6\13\1\0\3\13\7\0\2\13\15\0"+
    "\11\13\1\131\1\13\1\131\23\13\1\0\3\13\7\0"+
    "\2\13\15\0\12\13\1\132\6\13\1\132\15\13\1\0"+
    "\3\13\7\0\2\13\15\0\1\13\1\133\4\13\1\133"+
    "\30\13\1\0\3\13\31\0\1\134\72\0\1\135\104\0"+
    "\1\136\60\0\1\137\74\0\1\140\34\0\2\13\15\0"+
    "\16\13\1\141\1\13\1\141\16\13\1\0\3\13\7\0"+
    "\2\13\15\0\11\13\1\142\1\13\1\142\23\13\1\0"+
    "\3\13\7\0\2\13\15\0\16\13\1\143\1\13\1\143"+
    "\16\13\1\0\3\13\7\0\2\13\15\0\2\13\1\144"+
    "\27\13\1\144\4\13\1\0\3\13\7\0\2\13\15\0"+
    "\25\13\1\145\7\13\1\145\1\13\1\0\3\13\7\0"+
    "\2\13\15\0\17\13\1\146\6\13\1\146\10\13\1\0"+
    "\3\13\7\0\2\13\15\0\16\13\1\147\1\13\1\147"+
    "\16\13\1\0\3\13\7\0\2\13\15\0\4\13\1\150"+
    "\23\13\1\150\6\13\1\0\3\13\7\0\2\13\15\0"+
    "\16\13\1\151\1\13\1\151\16\13\1\0\3\13\7\0"+
    "\2\13\15\0\12\13\1\152\6\13\1\152\15\13\1\0"+
    "\3\13\7\0\2\13\15\0\4\13\1\121\23\13\1\121"+
    "\6\13\1\0\3\13\7\0\2\13\15\0\12\13\1\153"+
    "\6\13\1\153\15\13\1\0\3\13\34\0\1\154\104\0"+
    "\1\155\60\0\1\134\74\0\1\156\33\0\2\13\15\0"+
    "\5\13\1\157\26\13\1\157\2\13\1\0\3\13\7\0"+
    "\2\13\15\0\1\13\1\160\4\13\1\160\30\13\1\0"+
    "\3\13\7\0\2\13\15\0\4\13\1\161\23\13\1\161"+
    "\6\13\1\0\3\13\7\0\2\13\15\0\16\13\1\162"+
    "\1\13\1\162\16\13\1\0\3\13\30\0\1\163\66\0"+
    "\1\164\107\0\1\110\32\0\2\13\15\0\1\13\1\165"+
    "\4\13\1\165\30\13\1\0\3\13\7\0\2\13\15\0"+
    "\37\13\1\0\1\13\1\166\1\13\35\0\1\134\104\0"+
    "\1\167\26\0\2\13\15\0\3\13\1\170\17\13\1\170"+
    "\13\13\1\0\3\13\52\0\1\171\25\0\2\13\15\0"+
    "\4\13\1\172\23\13\1\172\6\13\1\0\3\13\53\0"+
    "\1\173\63\0\1\134\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4617];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\2\11\2\1\3\11"+
    "\2\1\11\11\14\1\1\11\3\1\1\11\1\0\1\11"+
    "\4\0\3\11\22\1\1\11\6\0\17\1\1\11\4\0"+
    "\13\1\3\0\4\1\2\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Max size of string constants
    static int MAX_STR_CONST = 1025;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();

    private int curr_lineno = 1;
    int get_curr_lineno() {
	return curr_lineno;
    }
    
    //quick fix to send EOF at the end of the file if it finishes mid comment or mid string
    private int eof_message = 0;
    int get_eof_message() {
    	return eof_message;
    }

    private AbstractSymbol filename;

    void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }

    AbstractSymbol curr_filename() {
	return filename;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoolLexer(java.io.Reader in) {
      // empty for now
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CoolLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { return new Symbol(TokenConstants.LBRACE);
          }
        case 48: break;
        case 26: 
          { return new Symbol(TokenConstants.ASSIGN);
          }
        case 49: break;
        case 9: 
          { AbstractSymbol i1 = AbstractTable.inttable.addInt(Integer.parseInt(yytext()));
    Symbol i2 = new Symbol(TokenConstants.INT_CONST);
    i2.value = i1;
    return i2;
          }
        case 50: break;
        case 15: 
          { return new Symbol(TokenConstants.NEG);
          }
        case 51: break;
        case 29: 
          { return new Symbol(TokenConstants.IF);
          }
        case 52: break;
        case 35: 
          { return new Symbol(TokenConstants.LET);
          }
        case 53: break;
        case 37: 
          { Symbol b1 = new Symbol(TokenConstants.BOOL_CONST);
          }
        case 54: break;
        case 28: 
          { return new Symbol(TokenConstants.IN);
          }
        case 55: break;
        case 12: 
          { return new Symbol(TokenConstants.EQ);
          }
        case 56: break;
        case 20: 
          { return new Symbol(TokenConstants.AT);
          }
        case 57: break;
        case 34: 
          { return new Symbol(TokenConstants.NEW);
          }
        case 58: break;
        case 23: 
          { AbstractSymbol s1 = AbstractTable.stringtable.addString(yytext());
        Symbol s2 = new Symbol(TokenConstants.STR_CONST);
        s2.value = s1;
        yybegin(YYINITIAL);
        return s2;
          }
        case 59: break;
        case 32: 
          { yybegin(YYINITIAL);
          }
        case 60: break;
        case 39: 
          { return new Symbol(TokenConstants.LOOP);
          }
        case 61: break;
        case 18: 
          { return new Symbol(TokenConstants.COLON);
          }
        case 62: break;
        case 10: 
          { return new Symbol(TokenConstants.PLUS);
          }
        case 63: break;
        case 7: 
          { ;
          }
        case 64: break;
        case 40: 
          { return new Symbol(TokenConstants.ESAC);
          }
        case 65: break;
        case 4: 
          { return new Symbol(TokenConstants.LPAREN);
          }
        case 66: break;
        case 45: 
          { return new Symbol(TokenConstants.WHILE);
          }
        case 67: break;
        case 24: 
          { yybegin(COMMENT);
          }
        case 68: break;
        case 42: 
          { return new Symbol(TokenConstants.CASE);
          }
        case 69: break;
        case 47: 
          { return new Symbol(TokenConstants.INHERITS);
          }
        case 70: break;
        case 41: 
          { return new Symbol(TokenConstants.ELSE);
          }
        case 71: break;
        case 22: 
          { return new Symbol(TokenConstants.RBRACE);
          }
        case 72: break;
        case 14: 
          { return new Symbol(TokenConstants.DOT);
          }
        case 73: break;
        case 38: 
          { return new Symbol(TokenConstants.THEN);
          }
        case 74: break;
        case 27: 
          { return new Symbol(TokenConstants.LE);
          }
        case 75: break;
        case 5: 
          { return new Symbol(TokenConstants.MULT);
          }
        case 76: break;
        case 8: 
          { AbstractSymbol o1 = AbstractTable.idtable.addString(yytext());
    Symbol o2 = new Symbol(TokenConstants.OBJECTID);
    o2.value = o1;
    return o2;
          }
        case 77: break;
        case 25: 
          { return new Symbol(TokenConstants.DARROW);
          }
        case 78: break;
        case 1: 
          { /* This rule should be the very last
                                     in your lexical specification and
                                     will match match everything not
                                     matched by other lexical rules. */
                                  System.err.println("LEXER BUG - UNMATCHED: " + yytext());
          }
        case 79: break;
        case 3: 
          { curr_lineno++;
          }
        case 80: break;
        case 31: 
          { return new Symbol(TokenConstants.FI);
          }
        case 81: break;
        case 2: 
          { return new Symbol(TokenConstants.MINUS);
          }
        case 82: break;
        case 36: 
          { AbstractSymbol t1 = AbstractTable.idtable.addString(yytext());
    Symbol t2 = new Symbol(TokenConstants.TYPEID);
    t2.value = t1;   return t2;
          }
        case 83: break;
        case 6: 
          { yybegin(STRING);
          }
        case 84: break;
        case 46: 
          { return new Symbol(TokenConstants.ISVOID);
          }
        case 85: break;
        case 30: 
          { return new Symbol(TokenConstants.OF);
          }
        case 86: break;
        case 17: 
          { return new Symbol(TokenConstants.SEMI);
          }
        case 87: break;
        case 33: 
          { return new Symbol(TokenConstants.NOT);
          }
        case 88: break;
        case 16: 
          { return new Symbol(TokenConstants.COMMA);
          }
        case 89: break;
        case 11: 
          { return new Symbol(TokenConstants.DIV);
          }
        case 90: break;
        case 13: 
          { return new Symbol(TokenConstants.LT);
          }
        case 91: break;
        case 44: 
          { return new Symbol(TokenConstants.CLASS);
          }
        case 92: break;
        case 43: 
          { return new Symbol(TokenConstants.POOL);
          }
        case 93: break;
        case 19: 
          { return new Symbol(TokenConstants.RPAREN);
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     switch(yystate()) {
    case YYINITIAL:
	/* nothing special to do in the initial state */
	break;
	case COMMENT:
		if(eof_message > 0) {
			return new Symbol(TokenConstants.EOF);
		}	
		String err_msg = new String("EOF in comment");
		StringSymbol error = new StringSymbol(err_msg, err_msg.length(), 0);
		Symbol ret = new Symbol(TokenConstants.ERROR);
		ret.value = error;
		eof_message++;
		return ret;
 
    case STRING:
    if(eof_message > 0) {
			return new Symbol(TokenConstants.EOF);
		}	
		String str_err_msg = new String("EOF in string");
		StringSymbol str_error = new StringSymbol(str_err_msg, str_err_msg.length(), 0);
		Symbol str_ret = new Symbol(TokenConstants.ERROR);
		str_ret.value = str_error;
		eof_message++;
		return str_ret;
	}	
    return new Symbol(TokenConstants.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
