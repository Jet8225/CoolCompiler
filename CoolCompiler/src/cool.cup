/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WON'T WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal program program;
nonterminal Classes class_list;
nonterminal class_ class;
nonterminal Features dummy_feature_list;
nonterminal Features feature_list;
nonterminal method method;
nonterminal attr attr;
nonterminal Features feature;
nonterminal Formals dummy_formal_list;
nonterminal Formals formal_list;
nonterminal formal formal;
nonterminal Expression expr;
nonterminal Expressions expr_list;
nonterminal Expressions arguments;
nonterminal let let_;


/* Precedence declarations go here. */

precedence left ASSIGN;
precedence left NOT;
precedence left LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

program	
	::= class_list:cl
	    {: RESULT = new program(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE dummy_feature_list:f RBRACE SEMI
	    {: RESULT = new class_(curr_lineno(), n, p, f, curr_filename()); :}
	;

/* Feature list may be empty. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	/* single feature */
	| feature:f
	    {: RESULT = (new Features(curr_lineno())).appendElement(f); :}
	/* several feature */
	| feature_list:fl feature:f
	    {: RESULT = fl.appendElement(f); :}

	;
	
/* Method, used in Feature */
method
	::= OBJECTID:o LPAREN dummy_formal_list:fol RPAREN COLON TYPEID:t LBRACE expr:e RBRACE SEMI
		{: RESULT = new method(curr_lineno(),o,fol,t,e); :}
	;

/* Attribute, used in Feature */
attr
	::= OBJECTID:o COLON TYPEID:t SEMI
		{: RESULT = new attr(curr_lineno(),o,t,null); :}
	| OBJECTID:o COLON TYPEID:t ASSIGN expr:e SEMI
		{: RESULT = new attr(curr_lineno(),o,t,e ); :}
	;

/* Feature */
feature

	/* ID (formal,*) : TYPE {expr}; */
	::= method: m
	    {: RESULT = (new Features(curr_lineno())).appendElement(m);:}
	    
	/* ID : TYPE [ <- expr ]; */
	| attr: a
	    {: RESULT = (new Features(curr_lineno())).appendElement(a);:}
	;
	
/* Formal list may be empty*/ 
	dummy_formal_list
    ::= /* empty */
        {: RESULT = new Formals(curr_lineno()); :}
    /* single formal */
	| formal:f
        {: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
    /* several formals */
    |   formal_list:fol COMMA formal:f
        {: RESULT = fol.appendElement(f); :}
    ;
    
/* Formal */
formal

	/*  ID : TYPE */ 
    ::= OBJECTID:o COLON TYPEID:t
        {: RESULT = new formal(curr_lineno(),o,t); :}
    ;

/* List of expressions */
expr_list

	/* single expression */
    ::= expr:e SEMI
        {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
        
    /* several expressions */
    |   expr_list:el expr:e SEMI
        {: RESULT = el.appendElement(e); :}
    ;
    
/* El interior de un let. Necesario para recursividad dentro de un let. */
let_ 
    ::=  OBJECTID:o COLON TYPEID:t ASSIGN expr:e_1 COMMA  let_:l
        {: RESULT = new let(curr_lineno(),o,t,e_1,l); :}
        
	| OBJECTID:o COLON TYPEID:t ASSIGN expr:e_1 IN expr:e_2
        {: RESULT = new let(curr_lineno(),o,t,e_1,e_2); :}
        
	| OBJECTID:o COLON TYPEID:t COMMA let_:l
         {: RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),l); :}
        
  	| OBJECTID:o COLON TYPEID:t IN expr:e_1
         {: RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e_1); :}
        
    ;



/* Expression. Bellow each expression, there is the expression according Figure 1 of Aid*/ 
expr

	/* ID <- expr */
    ::= OBJECTID:o ASSIGN expr:e
        {: RESULT = new assign(curr_lineno(),o,e); :}
     
    /* expr@TYPE.ID(expr) */
    |   expr:e AT TYPEID:t DOT OBJECTID:o LPAREN arguments:args RPAREN 
        {: RESULT = new static_dispatch(curr_lineno(), e,t, o, args); :}
        
    /* expr.ID(expr)    
	|	expr:e DOT OBJECTID:o LPAREN arguments:args RPAREN
        {: RESULT = new dispatch(curr_lineno(),e,o,args);  :}
    /* ID.(expr)  */
	/* NO SE COMO HACERLO */
	
	/* if expr then expr else expr fi */
    |   IF expr:e_1 THEN expr:e_2 ELSE expr:e_3 FI
        {:  RESULT = new cond(curr_lineno(), e_1, e_2, e_3);  :} 
        
    /* while expr loop expr pool */
    |   WHILE expr:e_1 LOOP expr:e_2 POOL
        {:  RESULT = new loop(curr_lineno(), e_1, e_2);  :}
        
    /* expr;+. Es importante tener en cuenta que cada expresion debe seguir de un ;, al estar entre {}. Ver como se ha definido expr_list*/
	|   LBRACE expr_list:el RBRACE
        {: RESULT = new block(curr_lineno(),el); :} 
        
    /* let [[ID : TYPE [ <- expr ]]],+ in expr */  
	| LET let_:l
        {: RESULT =  l;:}
        
        ;
        

 