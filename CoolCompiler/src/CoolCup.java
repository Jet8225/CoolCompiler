
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 20 21:58:39 AST 2014
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 20 21:58:39 AST 2014
  */
public class CoolCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolCup() {super();}

  /** Constructor which sets the default scanner. */
  public CoolCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\010\000\002\004\012" +
    "\000\002\005\002\000\002\005\003\000\002\005\004\000" +
    "\002\007\014\000\002\010\006\000\002\010\010\000\002" +
    "\011\003\000\002\011\003\000\002\012\002\000\002\012" +
    "\003\000\002\012\005\000\002\014\005\000\002\016\004" +
    "\000\002\016\005\000\002\020\011\000\002\020\011\000" +
    "\002\020\007\000\002\020\007\000\002\021\004\000\002" +
    "\021\005\000\002\022\007\000\002\015\005\000\002\015" +
    "\012\000\002\015\011\000\002\015\007\000\002\015\005" +
    "\000\002\015\004\000\002\015\007\000\002\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\004\004\007\001\002\000\006\002\001\004" +
    "\007\001\002\000\004\002\153\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\004\055\010\001\002\000\006\011" +
    "\012\050\011\001\002\000\006\051\ufffb\056\020\001\002" +
    "\000\004\055\013\001\002\000\004\050\014\001\002\000" +
    "\006\051\ufffb\056\020\001\002\000\004\051\ufff4\001\002" +
    "\000\004\051\ufffa\001\002\000\004\056\020\001\002\000" +
    "\006\044\025\045\026\001\002\000\004\051\023\001\002" +
    "\000\004\051\ufff5\001\002\000\004\043\024\001\002\000" +
    "\006\002\ufffc\004\ufffc\001\002\000\004\055\142\001\002" +
    "\000\006\046\ufff3\056\030\001\002\000\004\042\140\001" +
    "\002\000\004\044\136\001\002\000\004\046\ufff2\001\002" +
    "\000\004\046\033\001\002\000\004\044\034\001\002\000" +
    "\004\055\035\001\002\000\004\050\036\001\002\000\020" +
    "\007\045\012\040\017\043\020\046\024\041\050\037\056" +
    "\042\001\002\000\020\007\045\012\040\017\043\020\046" +
    "\024\041\050\037\056\042\001\002\000\004\056\113\001" +
    "\002\000\004\055\111\001\002\000\004\026\107\001\002" +
    "\000\020\007\045\012\040\017\043\020\046\024\041\050" +
    "\037\056\042\001\002\000\006\047\050\051\101\001\002" +
    "\000\020\007\045\012\040\017\043\020\046\024\041\050" +
    "\037\056\042\001\002\000\020\007\045\012\040\017\043" +
    "\020\046\024\041\050\037\056\042\001\002\000\006\022" +
    "\051\047\050\001\002\000\004\055\065\001\002\000\004" +
    "\056\052\001\002\000\004\044\061\001\002\000\006\021" +
    "\057\056\052\001\002\000\004\043\055\001\002\000\006" +
    "\021\uffe9\056\uffe9\001\002\000\004\043\060\001\002\000" +
    "\030\005\uffe0\006\uffe0\010\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\022\uffe0\042\uffe0\043\uffe0\047\uffe0\051\uffe0\001\002\000" +
    "\006\021\uffe8\056\uffe8\001\002\000\004\055\062\001\002" +
    "\000\004\023\063\001\002\000\020\007\045\012\040\017" +
    "\043\020\046\024\041\050\037\056\042\001\002\000\006" +
    "\043\uffe7\047\050\001\002\000\004\040\066\001\002\000" +
    "\004\056\067\001\002\000\004\045\070\001\002\000\002" +
    "\001\002\000\004\046\072\001\002\000\030\005\uffe5\006" +
    "\uffe5\010\uffe5\014\uffe5\015\uffe5\016\uffe5\022\uffe5\042\uffe5" +
    "\043\uffe5\047\uffe5\051\uffe5\001\002\000\006\016\074\047" +
    "\050\001\002\000\020\007\045\012\040\017\043\020\046" +
    "\024\041\050\037\056\042\001\002\000\006\005\076\047" +
    "\050\001\002\000\020\007\045\012\040\017\043\020\046" +
    "\024\041\050\037\056\042\001\002\000\006\006\100\047" +
    "\050\001\002\000\030\005\uffe4\006\uffe4\010\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\022\uffe4\042\uffe4\043\uffe4\047\uffe4\051" +
    "\uffe4\001\002\000\004\043\102\001\002\000\004\051\ufff8" +
    "\001\002\000\006\014\104\047\050\001\002\000\020\007" +
    "\045\012\040\017\043\020\046\024\041\050\037\056\042" +
    "\001\002\000\006\015\106\047\050\001\002\000\030\005" +
    "\uffe3\006\uffe3\010\uffe3\014\uffe3\015\uffe3\016\uffe3\022\uffe3" +
    "\042\uffe3\043\uffe3\047\uffe3\051\uffe3\001\002\000\020\007" +
    "\045\012\040\017\043\020\046\024\041\050\037\056\042" +
    "\001\002\000\030\005\uffe6\006\uffe6\010\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\022\uffe6\042\uffe6\043\uffe6\047\050\051\uffe6" +
    "\001\002\000\030\005\uffdf\006\uffdf\010\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\022\uffdf\042\uffdf\043\uffdf\047\uffdf\051\uffdf" +
    "\001\002\000\030\005\uffe1\006\uffe1\010\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\022\uffe1\042\uffe1\043\uffe1\047\uffe1\051\uffe1" +
    "\001\002\000\004\044\114\001\002\000\004\055\115\001" +
    "\002\000\010\010\117\026\120\042\116\001\002\000\004" +
    "\056\113\001\002\000\020\007\045\012\040\017\043\020" +
    "\046\024\041\050\037\056\042\001\002\000\020\007\045" +
    "\012\040\017\043\020\046\024\041\050\037\056\042\001" +
    "\002\000\010\010\123\042\122\047\050\001\002\000\004" +
    "\056\113\001\002\000\020\007\045\012\040\017\043\020" +
    "\046\024\041\050\037\056\042\001\002\000\030\005\uffec" +
    "\006\uffec\010\uffec\014\uffec\015\uffec\016\uffec\022\uffec\042" +
    "\uffec\043\uffec\047\050\051\uffec\001\002\000\030\005\uffed" +
    "\006\uffed\010\uffed\014\uffed\015\uffed\016\uffed\022\uffed\042" +
    "\uffed\043\uffed\047\uffed\051\uffed\001\002\000\030\005\uffea" +
    "\006\uffea\010\uffea\014\uffea\015\uffea\016\uffea\022\uffea\042" +
    "\uffea\043\uffea\047\050\051\uffea\001\002\000\030\005\uffeb" +
    "\006\uffeb\010\uffeb\014\uffeb\015\uffeb\016\uffeb\022\uffeb\042" +
    "\uffeb\043\uffeb\047\uffeb\051\uffeb\001\002\000\022\007\045" +
    "\012\040\017\043\020\046\024\041\050\037\051\134\056" +
    "\042\001\002\000\006\043\132\047\050\001\002\000\022" +
    "\007\uffef\012\uffef\017\uffef\020\uffef\024\uffef\050\uffef\051" +
    "\uffef\056\uffef\001\002\000\006\043\135\047\050\001\002" +
    "\000\030\005\uffe2\006\uffe2\010\uffe2\014\uffe2\015\uffe2\016" +
    "\uffe2\022\uffe2\042\uffe2\043\uffe2\047\uffe2\051\uffe2\001\002" +
    "\000\022\007\uffee\012\uffee\017\uffee\020\uffee\024\uffee\050" +
    "\uffee\051\uffee\056\uffee\001\002\000\004\055\137\001\002" +
    "\000\004\046\ufff0\001\002\000\004\056\030\001\002\000" +
    "\004\046\ufff1\001\002\000\006\026\144\043\143\001\002" +
    "\000\004\051\ufff7\001\002\000\020\007\045\012\040\017" +
    "\043\020\046\024\041\050\037\056\042\001\002\000\006" +
    "\043\146\047\050\001\002\000\004\051\ufff6\001\002\000" +
    "\004\051\ufff9\001\002\000\004\051\151\001\002\000\004" +
    "\043\152\001\002\000\006\002\ufffd\004\ufffd\001\002\000" +
    "\004\002\000\001\002\000\006\002\ufffe\004\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\010\002\004\003\003\004\005\001\001\000" +
    "\004\004\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\147\006" +
    "\016\007\021\010\014\011\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\020\006\016\007\021\010" +
    "\014\011\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\007\021\010\014\011\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\031\013" +
    "\026\014\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\043\001\001" +
    "\000\006\015\130\016\127\001\001\000\004\020\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\102" +
    "\001\001\000\002\001\001\000\004\015\072\001\001\000" +
    "\004\015\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\052\022\053\001\001\000\002\001\001\000" +
    "\004\022\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\074\001" +
    "\001\000\002\001\001\000\004\015\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\126\001\001\000\004\015\125\001\001\000\004\015\120" +
    "\001\001\000\002\001\001\000\004\020\124\001\001\000" +
    "\004\015\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolCup$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolCup parser;

  /** Constructor */
  CUP$CoolCup$actions(CoolCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolCup$do_action(
    int                        CUP$CoolCup$act_num,
    java_cup.runtime.lr_parser CUP$CoolCup$parser,
    java.util.Stack            CUP$CoolCup$stack,
    int                        CUP$CoolCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolCup$result;

      /* select the action based on the action number */
      switch (CUP$CoolCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new new_(curr_lineno(),t); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= CASE expr OF case_options ESAC 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Cases co = (Cases)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		  RESULT = new typcase(curr_lineno(),e,co); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= LET let_ 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		let l = (let)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT =  l;
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= LBRACE expr_list RBRACE 
            {
              Expression RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new block(curr_lineno(),el); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT =null;
		int e_1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int e_1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression e_1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int e_2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int e_2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e_2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		  RESULT = new loop(curr_lineno(), e_1, e_2);  
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT =null;
		int e_1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int e_1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		Expression e_1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int e_2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int e_2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression e_2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int e_3left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int e_3right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e_3 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		  RESULT = new cond(curr_lineno(), e_1, e_2, e_3);  
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr AT TYPEID DOT OBJECTID LPAREN arguments RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expressions args = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new static_dispatch(curr_lineno(), e,t, o, args); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new assign(curr_lineno(),o,e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // case_expr ::= OBJECTID COLON TYPEID DARROW expr 
            {
              branch RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new branch(curr_lineno(),o,t,e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("case_expr",16, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // case_options ::= case_options case_expr SEMI 
            {
              Cases RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Cases co = (Cases)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		branch c = (branch)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = co.appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("case_options",15, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // case_options ::= case_expr SEMI 
            {
              Cases RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		branch c = (branch)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = (new Cases(curr_lineno())).appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("case_options",15, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // let_ ::= OBJECTID COLON TYPEID IN expr 
            {
              let RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e_1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e_1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e_1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),e_1); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("let_",14, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // let_ ::= OBJECTID COLON TYPEID COMMA let_ 
            {
              let RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		let l = (let)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,new no_expr(curr_lineno()),l); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("let_",14, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // let_ ::= OBJECTID COLON TYPEID ASSIGN expr IN expr 
            {
              let RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int e_1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e_1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e_1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int e_2left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int e_2right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e_2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,e_1,e_2); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("let_",14, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // let_ ::= OBJECTID COLON TYPEID ASSIGN expr COMMA let_ 
            {
              let RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int e_1left = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int e_1right = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e_1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		let l = (let)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new let(curr_lineno(),o,t,e_1,l); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("let_",14, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr_list ::= expr_list expr SEMI 
            {
              Expressions RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr_list",12, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr_list ::= expr SEMI 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr_list",12, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formal ::= OBJECTID COLON TYPEID 
            {
              formal RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new formal(curr_lineno(),o,t); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("formal",10, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dummy_formal_list ::= formal_list COMMA formal 
            {
              Formals RESULT =null;
		int folleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int folright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Formals fol = (Formals)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		formal f = (formal)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = fol.appendElement(f); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("dummy_formal_list",8, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dummy_formal_list ::= formal 
            {
              Formals RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		formal f = (formal)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("dummy_formal_list",8, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dummy_formal_list ::= 
            {
              Formals RESULT =null;
		 RESULT = new Formals(curr_lineno()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("dummy_formal_list",8, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // feature ::= attr 
            {
              Features RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		attr a = (attr)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Features(curr_lineno())).appendElement(a);
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("feature",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= method 
            {
              Features RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		method m = (method)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Features(curr_lineno())).appendElement(m);
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("feature",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // attr ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              attr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new attr(curr_lineno(),o,t,e ); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("attr",6, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // attr ::= OBJECTID COLON TYPEID SEMI 
            {
              attr RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new attr(curr_lineno(),o,t,null); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("attr",6, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // method ::= OBJECTID LPAREN dummy_formal_list RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              method RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)).value;
		int folleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).left;
		int folright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).right;
		Formals fol = (Formals)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new method(curr_lineno(),o,fol,t,e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("method",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-9)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dummy_feature_list ::= feature_list feature 
            {
              Features RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("dummy_feature_list",3, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dummy_feature_list ::= feature 
            {
              Features RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Features(curr_lineno())).appendElement(f); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("dummy_feature_list",3, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dummy_feature_list ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("dummy_feature_list",3, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              class_ RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new class_(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class",2, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              class_ RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new class_(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class",2, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		class_ c = (class_)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		class_ c = (class_)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		program start_val = (program)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		RESULT = start_val;
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CoolCup$parser.done_parsing();
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              program RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new program(curr_lineno(), cl); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

